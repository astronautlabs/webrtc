version: 2.1
orbs:
  node: circleci/node@4.7

executors:
  linux-x86_64: &linux-x86_64
    docker:
      - image: buildpack-deps:xenial
    environment:
      TARGET_ARCH: x86_64
      CMAKE_BUILD_TYPE: Release
      PLATFORM: linux
  linux-arm64: &linux-arm64
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    environment:
      TARGET_ARCH: arm64
      CMAKE_BUILD_TYPE: Release
      PLATFORM: linux
  macos: &macos
    macos:
      xcode: "14.0.0"
    environment:
      TARGET_ARCH: x86_64
      CMAKE_BUILD_TYPE: Release
      PLATFORM: darwin

jobs:
  build:
    parameters:
      os:
        type: executor
      node-version:
        type: string
      release-type:
        type: string
    executor: << parameters.os >>
    working_directory: ~/node-webrtc
    steps:
      - node/install:
          node-version: $NODE_VERSION

      ###
      # CONFIGURE BUILD TYPE
      ###

      - when:
          condition:
            equal: [ "Debug", << parameters.release-type >> ]
          steps:
            - run:
                command: |
                  echo 'export DEBUG="true"' >> $BASH_ENV
                  echo 'export CMAKE_BUILD_TYPE="Debug"' >> $BASH_ENV
      
      ###
      # MACOS SPECIFIC SETUP
      ###
      
      - when:
          condition:
            equal: [ *macos, << parameters.os >> ]
          steps:
            - run:
                name: Install CMake
                # NOTE(mroberts): Weird error that says
                #
                #   Error: HOMEBREW_LOGS was not exported!
                #   Please don't worry, you likely hit a bug auto-updating from an old version.
                #   Rerun your command, everything is up-to-date and fine now.
                #
                command: brew install cmake || brew install cmake
        
      ###
      # LINUX SPECIFIC SETUP
      ###

      - when:
          condition:
            or:
              - equal: [ *linux-x86_64, << parameters.os >> ]
              - equal: [ *linux-arm64, << parameters.os >> ]
          steps:
            - run:
                name: Check Compiler Versions
                command: |
                  gcc --version
                  g++ --version
            - run:
                name: Install CMake
                command: |
                  cd ~
                  wget https://cmake.org/files/v3.12/cmake-3.12.3-Linux-x86_64.sh
                  chmod +x cmake-3.12.3-Linux-x86_64.sh
                  sudo ./cmake-3.12.3-Linux-x86_64.sh --skip-license
                  sudo ln -s $(pwd)/bin/* /usr/local/bin
                  rm cmake-3.12.3-Linux-x86_64.sh
            - run: # TODO: I think this won't be needed anymore
                name: Install ARM Tools (ARM-only)
                command: |
                  if [[ "$TARGET_ARCH" != arm* ]]; then
                    echo "Skipping..."
                    exit 0
                  fi

                  cd ~

                  if [ "$TARGET_ARCH" == "arm" ]; then
                    wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/arm-linux-gnueabihf/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
                    tar xf gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
                    rm gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz
                    echo >> $BASH_ENV export ARM_TOOLS_PATH=$(pwd)/gcc-linaro-7.3.1-2018.05-x86_64_arm-linux-gnueabihf

                    # NOTE(mroberts): This is needed so that the WebRTC build finds the correct ld.gold.
                    sudo apt-get install -y g++-arm-linux-gnueabihf
                  else
                    wget https://releases.linaro.org/components/toolchain/binaries/7.3-2018.05/aarch64-linux-gnu/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
                    tar xf gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
                    rm gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu.tar.xz
                    echo >> $BASH_ENV export ARM_TOOLS_PATH=$(pwd)/gcc-linaro-7.3.1-2018.05-x86_64_aarch64-linux-gnu

                    # NOTE(mroberts): This is needed so that the WebRTC build finds the correct ld.gold.
                    sudo apt-get install -y g++-aarch64-linux-gnu
                  fi
      ###
      # MAIN SETUP
      ###

      - checkout
      - run:
          name: Before restore cache...
          command: |
            echo >>CACHE_KEY "TARGET_ARCH=$TARGET_ARCH"
            echo >>CACHE_KEY "CMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE"
            cat CACHE_KEY
      - restore_cache:
          key: asset-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "CMakeLists.txt" }}
      - run:
          name: npm install
          command: |
            # NOTE(mroberts): We have to reduce PARALLELISM during the build;
            # otherwise, we run out of memory.
            export PARALLELISM=2

            # NOTE(mroberts): This fixes up some odd behavior when untar-ing as
            # root.
            export TAR_OPTIONS=--no-same-owner

            # NOTE(mroberts): We aren't interested in downloading pre-built
            # binaries on the CI server.
            export SKIP_DOWNLOAD=true

            # NOTE(mroberts): We need `--unsafe-perm` to run the install script
            # as root.
            npm install --unsafe-perm

            if [[ "$TARGET_ARCH" != arm* ]]; then
              npm run install-example
            fi
      - run: npm run build
      - save_cache:
          key: asset-cache-v1-{{ arch }}-{{ checksum "CACHE_KEY" }}-{{ checksum "CMakeLists.txt" }}
          paths:
            - build/external
      - run: npm run lint
      - run:
          name: Before save workspace...
          command: |
            mkdir -p /tmp/workspace/$PLATFORM-$TARGET_ARCH-$CMAKE_BUILD_TYPE
            cd /tmp/workspace/$PLATFORM-$TARGET_ARCH-$CMAKE_BUILD_TYPE

            cp ~/node-webrtc/build/$BUILD_TYPE/wrtc.node wrtc.node
            cp -R ~/node-webrtc/example example || true
            cp -R ~/node-webrtc/node_modules node_modules
            cp -R ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm-sysroot debian_sid_arm-sysroot || true
            cp -R ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm64-sysroot debian_sid_arm64-sysroot || true

      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "*"
      - run:
          name: Run Unit and Integration Tests
          command: |
            # NOTE(mroberts): We run a reduced set of tests for ARM since some of
            # them fail (and I'm not sure all the reasons why, yet).
            export NODE_VERSION=$(node -v | tr -d '\n')
            if [[ "$TARGET_ARCH" == arm64 ]]; then
              qemu-aarch64 -L ~/node-webrtc/build/external/libwebrtc/download/src/build/linux/debian_sid_arm64-sysroot ~/node-$NODE_VERSION-linux-arm64/bin/node test/create-offer.js
            else
              # NOTE(mroberts): First run C++ tests, if any.
              node test/cpp.js

              export CHECK_REFLEXIVE=true
              npm test

              cd example
              npm test
            fi
        
      ###
      # WEB PLATFORM TESTS
      ###
      - run:
          name: Run Web Platform Tests (x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            if [[ "$(uname)" == Linux ]]; then
              sudo apt-get install --reinstall python-pkg-resources
            fi

            npm run wpt:init
            npm run wpt:test
      - run:
          name: Setup /etc/hosts for Web Platform Tests (x86_64-only)
          command: |
            cat ci/wpt-hosts >>/etc/hosts
      
      ###
      # RUN BROWSER TESTS (linux only for now)
      ###

      - when:
          condition:
            or:
              - equal: [ *linux-x86_64, << parameters.os >> ]
              - equal: [ *linux-arm64, << parameters.os >> ]
          steps:
            - run:
                name: Install Chrome and Firefox (x86_64-only)
                command: |
                  if [[ "$TARGET_ARCH" == arm* ]]; then
                    echo "Skipping..."
                    exit 0
                  fi

                  sudo apt-get install -y \
                    gconf-service \
                    libasound2 \
                    libatk1.0-0 \
                    libatk-bridge2.0-0 \
                    libc6 \
                    libcairo2 \
                    libcups2 \
                    libdbus-1-3 \
                    libexpat1 \
                    libfontconfig1 \
                    libgcc1 \
                    libgconf-2-4 \
                    libgdk-pixbuf2.0-0 \
                    libglib2.0-0 \
                    libgtk-3-0 \
                    libnspr4 \
                    libpango-1.0-0 \
                    libpangocairo-1.0-0 \
                    libstdc++6 \
                    libx11-6 \
                    libx11-xcb1 \
                    libxcb1 \
                    libxcomposite1 \
                    libxcursor1 \
                    libxdamage1 \
                    libxext6 \
                    libxfixes3 \
                    libxi6 \
                    libxrandr2 \
                    libxrender1 \
                    libxss1 \
                    libxtst6 \
                    ca-certificates \
                    fonts-liberation \
                    libappindicator1 \
                    libnss3 \
                    lsb-release \
                    xdg-utils \
                    wget
                  cd node_modules/travis-multirunner
                  export BVER=stable
                  BROWSER=chrome ./setup.sh
                  BROWSER=firefox ./setup.sh
                  echo >> $BASH_ENV export CHROME_BIN=$(pwd)/browsers/bin/chrome-$BVER
                  echo >> $BASH_ENV export FIREFOX_BIN=$(pwd)/browsers/bin/firefox-$BVER
      - run:
          name: Test Browsers (Linux x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            npm run test:browsers
      ###
      # TEST ELECTRON ON ALL PLATFORMS
      ###
      - run:
          name: Test Electron (x86_64-only)
          command: |
            if [[ "$TARGET_ARCH" == arm* ]]; then
              echo "Skipping..."
              exit 0
            fi

            npm install --no-save electron@4.x
            if [[ "$(uname)" == Linux ]]; then
              sudo apt-get install -y xvfb
              xvfb-run ./node_modules/.bin/electron test/electron --no-sandbox
            else
              npm run test:electron
            fi

            npm install --no-save electron@5.x
            if [[ "$(uname)" == Linux ]]; then
              xvfb-run ./node_modules/.bin/electron test/electron --no-sandbox
            else
              npm run test:electron
            fi
      - run: # TODO: use conditionals and such
          name: Publish Binary (arm64-, x86_64-only)
          command: |
            if [[ `git show -s --format=%B $CIRCLE_SHA1` == *'[publish binary]'* ]]; then
              npm run publish-binary
            else
              echo "Skipping..."
            fi

workflows:
  version: 2
  build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [linux-x86_64, linux-arm64, macos]
              node-version: ["14.17.6", "16.9.0"]
              release-type: ["Debug", "Release"]